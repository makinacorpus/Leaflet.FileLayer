// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../leaflet
//   ../togeojson

declare module 'leaflet.filelayer' {
    import { FileLayerLoad, Control } from 'leaflet.filelayer/filelayerload';
    import { FileLoader, FileLayer } from 'leaflet.filelayer/fileloader';
    global {
        interface Window {
            L: typeof import('leaflet');
            toGeoJSON: typeof import('togeojson');
        }
    }
    export { FileLayerLoad, Control, FileLoader, FileLayer };
}

declare module 'leaflet.filelayer/filelayerload' {
    import L from 'leaflet';
    import { ControlOptions, fileLayerLoad } from 'leaflet.filelayer/interfaces';
    class FileLayerLoad extends L.Control implements fileLayerLoad {
        options: ControlOptions;
        constructor(options: Partial<ControlOptions>);
        onAdd(map: L.Map): HTMLElement;
        _createIcon(): HTMLDivElement;
        _initDragAndDrop(map: L.Map): void;
        _appendControlStyles(container: any): void;
    }
    const Control: {
        fileLayerLoad: (options: object) => FileLayerLoad;
    };
    export { FileLayerLoad, Control };
}

declare module 'leaflet.filelayer/fileloader' {
    import L from 'leaflet';
    import { fileLoader, LayerOptions, Parsers } from 'leaflet.filelayer/interfaces';
    class FileLoader extends L.Layer implements fileLoader {
        options: LayerOptions;
        _parsers: Parsers;
        constructor(map: L.Map, options?: L.LayerOptions);
        getFileExtension(file: File | string): string;
        load(file: File, ext?: string): FileReader | boolean;
        loadMultiple(files: File[] | FileList, ext?: string): FileReader[];
        loadData(data: string, name: string, ext: string): void;
        _isParameterMissing(v: any, vname: string): boolean;
        _getParser(name: string, ext?: string): {
            processor: Function;
            ext: string;
        } | undefined;
        _isFileSizeOk(size: number): boolean;
        _loadGeoJSON(content: string | GeoJSON.GeoJsonObject | GeoJSON.GeoJsonObject[]): L.Layer;
        _convertToGeoJSON(content: string | Document, format: 'gpx' | 'kml'): L.Layer;
    }
    const FileLayer: {
        fileLoader: (map: L.Map, options: object) => FileLoader;
    };
    export { FileLoader, FileLayer };
}

declare module 'leaflet.filelayer/interfaces' {
    import L from 'leaflet';
    import * as toGeoJSON from 'togeojson';
    interface LayerOptions extends L.LayerOptions {
        layer: typeof L.geoJSON;
        layerOptions: object;
        fileSizeLimit: number;
        addToMap: boolean;
    }
    interface ControlOptions extends L.ControlOptions {
        title?: string;
        position?: L.ControlPosition;
        fitBounds?: boolean;
        layerOptions?: any;
        addToMap?: boolean;
        fileSizeLimit?: number;
        formats: string[];
    }
    interface fileLoader extends L.Layer {
        options: LayerOptions;
        getFileExtension(file: File | string): string;
        load(file: File, ext: string): FileReader | boolean;
        loadMultiple(files: File[] | FileList): FileReader[];
        loadData(data: string, name: string, ext: string): boolean | void;
        _isParameterMissing(v: any, vname: string): boolean;
        _getParser(name: string, ext?: string): {
            processor: Function;
            ext: string;
        } | undefined;
        _isFileSizeOk(size: number): boolean;
        _loadGeoJSON(content: any): any;
        _convertToGeoJSON(content: any, format: keyof typeof toGeoJSON): any;
    }
    interface Parsers {
        [key: string]: (content: string | GeoJSON.GeoJsonObject, format: 'gpx' | 'kml') => L.Layer;
    }
    interface fileLayerLoad extends L.Control {
        options: ControlOptions;
        onAdd(map: L.Map): HTMLElement;
        _createIcon(): void;
        _initDragAndDrop(map: L.Map): void;
        _appendControlStyles(container: any): void;
    }
    export { fileLoader, LayerOptions, ControlOptions, fileLayerLoad, Parsers };
}

